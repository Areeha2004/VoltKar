generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL") // <--- add this line
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  meters            Meter[]
  appliances        Appliance[]
  challenges        UserChallenge[]
  readings          MeterReading[]
  forecasts         Forecast[]
  notifications     Notification[]
  leaderboard       LeaderboardEntry?
  preferences       UserPreference?
  anomalyDetections AnomalyDetection[]
}

model Meter {
  id        String   @id @default(uuid())
  userId    String
  label     String
  type      String? // e.g. Home, Office, Solar, Sub-meter
  createdAt DateTime @default(now())

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  readings MeterReading[]
}

model MeterReading {
  id        String   @id @default(uuid())
  meterId   String
  userId    String
  reading   Float       // The actual meter reading value
  week      Int         @default(1) // 1â€“5 for weekly readings
  month     Int
  year      Int
  date      DateTime    @default(now())
  createdAt DateTime    @default(now())
  
  isOfficialEndOfMonth Boolean @default(false) // True for official end-of-month readings
  lastReading   Decimal?  // Value from previous week/month
  usage         Float?    // kWh consumed since last reading
  estimatedCost Float?    // Cached cost calculation
  notes         String?

  meter Meter @relation(fields: [meterId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  anomalyDetections AnomalyDetection[]
}

model Tariff {
  id           String   @id @default(uuid())
  disco        String   // e.g., LESCO, GEPCO
  slabMin      Float
  slabMax      Float?
  rate         Float
  fuelAdj      Float
  fixedCharges Float
  taxPercent   Float
  tvFee        Float    @default(35)   // TV fee
  updatedAt    DateTime @updatedAt
}

model Forecast {
  id            String   @id @default(uuid())
  userId        String
  month         Int
  year          Int
  week          Int?     // Optional for partial-month forecasts
  projectedKwh  Float
  estimatedBill Float
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Appliance {
  id           String   @id @default(uuid())
  userId       String
  name         String
  wattage      Float
  hoursPerDay  Float
  daysPerMonth Int
  estimatedKwh Float?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model AnomalyDetection {
  id           String   @id @default(uuid())
  userId       String
  readingId    String
  detected     Boolean
  description  String?
  suggestedTip String?
  createdAt    DateTime @default(now())

  user    User         @relation(fields: [userId], references: [id])
  reading MeterReading @relation(fields: [readingId], references: [id])
}



model UserChallenge {
  id          String  @id @default(uuid())
  userId      String
  challengeId String
  status      String // active, completed, failed
  progress    Float
  earnedBadge String?

  user      User      @relation(fields: [userId], references: [id])
  challenge Challenge @relation(fields: [challengeId], references: [id])
}

model Challenge {
  id           String @id @default(uuid())
  title        String
  description  String
  goalType     String // e.g., reduceAC, saveKwh
  targetValue  Float
  durationDays Int

  userChallenges UserChallenge[]
}

model LeaderboardEntry {
  id     String @id @default(uuid())
  userId String @unique
  disco  String
  score  Float // e.g., % saved this month
  month  Int
  year   Int
  rank   Int?

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String // alert, reminder, tip
  content   String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserPreference {
  id       String @id @default(uuid())
  userId   String @unique
  disco    String // LESCO, etc.
  language String // en, ur
  unitType String // kWh, etc.
  currency String // PKR

  user User @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
